<?php

use Bitrix\Main\Localization\Loc;
use Bitrix\Main\ModuleManager;
use Bitrix\Main\Config\Option;
use Bitrix\Main\EventManager;
use Bitrix\Main\Application;
use Bitrix\Main\IO\Directory;

/**
 * Установщик для модуля {{ full_module_name }}.
 */
class {{ install_class }} extends CModule
{
    /**
     * @inheritdoc
     */
    public function __construct()
    {
        Loc::loadMessages(__FILE__);

        $arModuleVersion = [];
        include __DIR__ . '/version.php';

        if (is_array($arModuleVersion) && array_key_exists('VERSION', $arModuleVersion)) {
            $this->MODULE_VERSION = $arModuleVersion['VERSION'];
            $this->MODULE_VERSION_DATE = $arModuleVersion['VERSION_DATE'];
        }

        $this->MODULE_ID = '{{ full_module_name }}';
        $this->MODULE_NAME = Loc::getMessage('{{ install_class|upper }}_MODULE_NAME');
        $this->MODULE_DESCRIPTION = Loc::getMessage('{{ install_class|upper }}_MODULE_DESCRIPTION');
        $this->MODULE_GROUP_RIGHTS = 'N';
        $this->PARTNER_NAME = Loc::getMessage('{{ install_class|upper }}_MODULE_PARTNER_NAME');
    }

    /**
     * Возвращает список событий, которые должны быть установлены для данного модуля.
     *
     * @return array
     */
    protected function getEventsList()
    {
        return [
            /*
            [
                'FROM_MODULE_ID' => 'iblock',
                'EVENT_TYPE' => 'OnAfterIBlockAdd',
                'TO_CLASS' => '{{ php_namespace }}\Events',
                'TO_METHOD' => 'example',
            ],
            */
        ];
    }

    /**
     * Возвращает список агентов, которые должен зарегистрировать модуль.
     *
     * @return array
     */
    protected function getAgentsList()
    {
        return [
            /*
            [
                'NAME' => 'example',
                'PERIODICITY' => 60 * 60 * 5,
            ],
            */
        ];
    }

    /**
     * @inheritdoc
     */
    public function DoInstall()
    {
        ModuleManager::registerModule($this->MODULE_ID);
        $this->installFiles();
        $this->installDb();
    }

    /**
     * @inheritdoc
     */
    public function DoUninstall()
    {
        $this->unInstallDb();
        $this->unInstallFiles();
        ModuleManager::unregisterModule($this->MODULE_ID);
    }

    /**
     * Устанавливает данные модуля в базу данных сайта.
     */
    public function installDb()
    {
        $eventManager = EventManager::getInstance();
        foreach ($this->getEventsList() as $event) {
            $res = $eventManager->registerEventHandlerCompatible(
                $event['FROM_MODULE_ID'],
                $event['EVENT_TYPE'],
                $this->MODULE_ID,
                $event['TO_CLASS'],
                $event['TO_METHOD'],
                $event['SORT']
            );
        }

        foreach ($this->getAgentsList() as $agent) {
            $res = CAgent::AddAgent(
                "{{ php_namespace }}\Agency::runner('{$agent['NAME']}');",
                $this->MODULE_ID,
                'N',
                $agent['PERIODICITY']
            );
            if (!$res) {
                throw new Exception("Can't install Agency::{$agent['NAME']}");
            }
        }
    }

    /**
     * Удаляет данные модуля из базы данных сайта.
     */
    public function unInstallDb()
    {
        //удаляем привязку к событиям официальным методом
        $eventManager = EventManager::getInstance();
        foreach ($this->getEventsList() as $event) {
            $eventManager->unRegisterEventHandler(
                $event['FROM_MODULE_ID'],
                $event['EVENT_TYPE'],
                $this->MODULE_ID,
                $event['TO_CLASS'],
                $event['TO_METHOD']
            );
        }

        //на всякий случай дочищаем то, что осталось прямым запросом
        $connection = Bitrix\Main\Application::getConnection();
        $sqlHelper = $connection->getSqlHelper();
        $sql = "DELETE FROM b_module_to_module WHERE TO_MODULE_ID = '" . $sqlHelper->forSql($this->MODULE_ID) . "'";
        $connection->queryExecute($sql);

        //удаляем все опции модуля
        Option::delete($this->MODULE_ID);

        //удаляем всех агентов модуля
        CAgent::removeModuleAgents($this->MODULE_ID);
    }

    /**
     * Копирует файлы модуля в битрикс.
     *
     * @retrun bool
     */
    public function installFiles()
    {
        $js = $this->getInstallatorPath() . '/js';
        if (is_dir($js)) {
            CopyDirFiles(
                $js,
                Application::getDocumentRoot() . "/bitrix/js/{$this->MODULE_ID}",
                true,
                true
            );
        }

        $css = $this->getInstallatorPath() . '/css';
        if (is_dir($css)) {
            CopyDirFiles(
                $css,
                Application::getDocumentRoot() . "/bitrix/css/{$this->MODULE_ID}",
                true,
                true
            );
        }

        $components = $this->getInstallatorPath() . '/components';
        if (is_dir($components)) {
            CopyDirFiles(
                $components,
                $this->getComponentPath('components') . "/{$this->MODULE_ID}",
                true,
                true
            );
        }

        return true;
    }

    /**
     * Удаляет файлы модуля из битрикса.
     *
     * @retrun bool
     */
    public function unInstallFiles()
    {
        $js = Application::getDocumentRoot() . "/bitrix/js/{$this->MODULE_ID}";
        if (is_dir($js)) {
            Directory::deleteDirectory($js);
        }

        $css = Application::getDocumentRoot() . "/bitrix/css/{$this->MODULE_ID}";
        if (is_dir($css)) {
            Directory::deleteDirectory($css);
        }

        $components = $this->getComponentPath('components') . "/{$this->MODULE_ID}";
        if (is_dir($components)) {
            Directory::deleteDirectory($components);
        }

        return true;
    }

    /**
     * Возвращает путь к папке, в которую будут установлены компоненты модуля.
     *
     * @param string $type тип компонентов для установки (components, js, admin и т.д.)
     *
     * @return string
     */
    protected function getComponentPath($type = 'components')
    {
        if ($type === 'admin') {
            $base = Application::getDocumentRoot() . '/bitrix';
        } else {
            $base = dirname(dirname(dirname($this->getInstallatorPath())));
        }

        return $base . '/' . str_replace(['/', '.'], '', $type);
    }

    /**
     * Возвращает путь к папке с модулем
     *
     * @return string
     */
    protected function getInstallatorPath()
    {
        return __DIR__;
    }
}
